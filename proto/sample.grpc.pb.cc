// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sample.proto

#include "sample.pb.h"
#include "sample.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sample {

static const char* ExampleSvc_method_names[] = {
  "/sample.ExampleSvc/RPC_1",
  "/sample.ExampleSvc/RPC_2",
};

std::unique_ptr< ExampleSvc::Stub> ExampleSvc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ExampleSvc::Stub> stub(new ExampleSvc::Stub(channel, options));
  return stub;
}

ExampleSvc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RPC_1_(ExampleSvc_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RPC_2_(ExampleSvc_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ExampleSvc::Stub::RPC_1(::grpc::ClientContext* context, const ::sample::GRPC1Request& request, ::sample::GRPC1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sample::GRPC1Request, ::sample::GRPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RPC_1_, context, request, response);
}

void ExampleSvc::Stub::async::RPC_1(::grpc::ClientContext* context, const ::sample::GRPC1Request* request, ::sample::GRPC1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sample::GRPC1Request, ::sample::GRPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_1_, context, request, response, std::move(f));
}

void ExampleSvc::Stub::async::RPC_1(::grpc::ClientContext* context, const ::sample::GRPC1Request* request, ::sample::GRPC1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sample::GRPC1Response>* ExampleSvc::Stub::PrepareAsyncRPC_1Raw(::grpc::ClientContext* context, const ::sample::GRPC1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sample::GRPC1Response, ::sample::GRPC1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RPC_1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sample::GRPC1Response>* ExampleSvc::Stub::AsyncRPC_1Raw(::grpc::ClientContext* context, const ::sample::GRPC1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRPC_1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExampleSvc::Stub::RPC_2(::grpc::ClientContext* context, const ::sample::GRPC2Request& request, ::sample::GRPC2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sample::GRPC2Request, ::sample::GRPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RPC_2_, context, request, response);
}

void ExampleSvc::Stub::async::RPC_2(::grpc::ClientContext* context, const ::sample::GRPC2Request* request, ::sample::GRPC2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sample::GRPC2Request, ::sample::GRPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_2_, context, request, response, std::move(f));
}

void ExampleSvc::Stub::async::RPC_2(::grpc::ClientContext* context, const ::sample::GRPC2Request* request, ::sample::GRPC2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RPC_2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sample::GRPC2Response>* ExampleSvc::Stub::PrepareAsyncRPC_2Raw(::grpc::ClientContext* context, const ::sample::GRPC2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sample::GRPC2Response, ::sample::GRPC2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RPC_2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sample::GRPC2Response>* ExampleSvc::Stub::AsyncRPC_2Raw(::grpc::ClientContext* context, const ::sample::GRPC2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRPC_2Raw(context, request, cq);
  result->StartCall();
  return result;
}

ExampleSvc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExampleSvc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExampleSvc::Service, ::sample::GRPC1Request, ::sample::GRPC1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExampleSvc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sample::GRPC1Request* req,
             ::sample::GRPC1Response* resp) {
               return service->RPC_1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExampleSvc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExampleSvc::Service, ::sample::GRPC2Request, ::sample::GRPC2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExampleSvc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sample::GRPC2Request* req,
             ::sample::GRPC2Response* resp) {
               return service->RPC_2(ctx, req, resp);
             }, this)));
}

ExampleSvc::Service::~Service() {
}

::grpc::Status ExampleSvc::Service::RPC_1(::grpc::ServerContext* context, const ::sample::GRPC1Request* request, ::sample::GRPC1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExampleSvc::Service::RPC_2(::grpc::ServerContext* context, const ::sample::GRPC2Request* request, ::sample::GRPC2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sample

